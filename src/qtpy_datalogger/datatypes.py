"""
Shared constants and classes used by the host.

This module uses CPython features not available in the CircuitPython implementation.
"""

import datetime
import enum
import pathlib
import subprocess
from typing import Any, NamedTuple

import toml


class Links(enum.StrEnum):
    """URLs for references and help."""

    Homepage = "https://github.com/wireddown/qt-py-s3-daq-app/wiki"
    New_Bug = "https://github.com/wireddown/qt-py-s3-daq-app/issues/new?template=bug-report.md"
    Board_Support_Matrix = "https://docs.circuitpython.org/en/stable/shared-bindings/support_matrix.html"


class ExitCode(enum.IntEnum):
    """Exit codes for commands."""

    Success = 0
    Discovery_Failure = 41
    COM1_Failure = 42
    Board_Lookup_Failure = 51


class CaptionCorrections:
    """Corrections for abbreviated or malformatted device descriptions."""

    @staticmethod
    def get_corrected(caption: str) -> str:
        """Return the corrected string for the specified input caption."""
        caption_corrections = {
            "Adafruit QT Py ESP32S3 no USB Device": "Adafruit QT Py ESP32-S3 no PSRAM",
            "adafruit_qtpy_esp32s3_nopsram": "Adafruit QT Py ESP32-S3 no PSRAM",
            "Adafruit QT Py ESP32S3 4M USB Device": "Adafruit QT Py ESP32-S3 2MB PSRAM",
            "adafruit_qtpy_esp32s3_4mbflash_2mbpsram": "Adafruit QT Py ESP32-S3 2MB PSRAM",
        }
        return caption_corrections.get(caption, caption)


class SnsrPath(enum.StrEnum):
    """Reserved path names for qtpy_datalogger sensor_node bundles."""

    root = "snsr"
    notice = "snsr/notice.toml"


class SnsrNotice(NamedTuple):
    """Represents the contents of the notice.toml file for a sensor_node."""

    comment: str
    version: str
    commit: str
    timestamp: datetime.datetime

    @staticmethod
    def get_package_notice_info(allow_dev_version: bool) -> "SnsrNotice":
        """Detect and generate the information used in the notice.toml file."""
        this_file = pathlib.Path(__file__)
        this_folder = this_file.parent
        notice_toml = this_folder.joinpath("sensor_node", SnsrPath.notice)
        notice_contents = toml.load(notice_toml)
        snsr_notice = SnsrNotice(**notice_contents)
        my_comment = snsr_notice.comment
        my_version = snsr_notice.version
        my_commit = snsr_notice.commit
        my_timestamp = snsr_notice.timestamp

        if __package__:
            # We're installed
            import importlib.metadata

            my_version = importlib.metadata.version(str(__package__))

        # When we're running from the git source, we're in development mode
        this_package_parent = this_file.parent.parent
        in_dev_mode = this_package_parent.name == "src"
        if in_dev_mode:
            if allow_dev_version:
                my_version = f"{my_version}.post0.dev0"

            most_recent_commit_info = ["git", "log", "--max-count=1", "--format=%h %aI"]
            sha_with_timestamp = subprocess.check_output(most_recent_commit_info).strip()  # noqa: S603 -- command is well-formed and user cannot execute arbitrary code
            sha_and_timestamp = sha_with_timestamp.decode("UTF-8").split(" ")
            my_commit = sha_and_timestamp[0]
            my_timestamp = datetime.datetime.fromisoformat(sha_and_timestamp[1])

        my_comment = f"Generated by '{__name__}.py'"
        return SnsrNotice(my_comment, my_version, my_commit, my_timestamp)
