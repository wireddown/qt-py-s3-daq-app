name: Run Tests and Analyzers

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  test:
    name: Test on Python ${{ matrix.python_version }}
    runs-on: windows-latest
    strategy:
      matrix:
        python_version: ["3.11"]

    steps:
    - name: Get source code
      uses: actions/checkout@v4

    - name: Install poetry
      run: |
        pipx install poetry
        poetry about
        poetry config --list

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "${{ matrix.python_version }}"
        cache: "poetry"

    - name: Install dependencies
      run: |
        poetry install
        poetry show

    - name: Run pytest
      run: poetry run pytest --verbose --junit-xml=junit/pytest-results-${{ runner.os }}-${{ matrix.python_version }}.xml

    - name: Run ruff check
      id: ruff-check
      run: poetry run ruff check --output-format junit --output-file junit/ruff-check-results-${{ runner.os }}-${{ matrix.python_version }}.xml
      if: always()

    - name: Run ruff format --diff
      run: |
        echo "::warning title=ruff check errors::Use 'poe fix' to apply safe fixes. Use 'ruff rule X000' to see examples."
        poetry run ruff format --diff
      if: ${{ steps.ruff-check.outcome }} == 'failure'

    - name: Run pyright
      run: poetry run pyright --dependencies
      if: always()

    - name: Create result report
      id: result-report
      uses: dorny/test-reporter@v1.9.1
      with:
        name: Results for Python ${{ matrix.python_version }} on ${{ runner.os }}
        path: junit/*.xml
        reporter: 'java-junit'
      if: always()

    - name: Get report ID
      run: |
        $report_id_segment = '${{steps.result-report.outputs.url}}'.split('/')[-1]
        echo "REPORT_ID=$report_id_segment" >> $env:GITHUB_ENV
      if: always()

    - name: Build package
      run: poetry build --verbose --format sdist
      if: always()

    - name: Upload package
      uses: actions/upload-artifact@v4
      with:
        name: Package for Python ${{ matrix.python_version }} on ${{ runner.os }}
        path: dist/*.tar.gz
      if: always()

    - name: Write workflow summary
      run: |
        echo "# :checkered_flag: Run Tests and Analyzers" >> $env:GITHUB_STEP_SUMMARY
        echo "## :test_tube: [Test result report](https://github.com/${{github.repository}}/runs/$($env:REPORT_ID)?check_suite_focus=true)" >> $env:GITHUB_STEP_SUMMARY
        echo "| ${{ steps.result-report.outputs.passed }} :white_check_mark: | ${{ steps.result-report.outputs.failed }} :x: | ${{ steps.result-report.outputs.skipped }} :next_track_button: |"  >> $env:GITHUB_STEP_SUMMARY
        echo "|--|--|--|"  >> $env:GITHUB_STEP_SUMMARY
      if: always()
